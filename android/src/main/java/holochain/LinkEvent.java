// Java class holochain.LinkEvent is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * LinkEvent represents the value stored in buntDB associated with a
link key for one source having stored one LinkingEntry
(The Link struct defined in entry.go is encoded in the key used for buntDB)
 */
public final class LinkEvent implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    LinkEvent(Seq.Ref ref) { this.ref = ref; }
    
    public LinkEvent() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    public final native long getStatus();
    public final native void setStatus(long v);
    
    public final native String getSource();
    public final native void setSource(String v);
    
    public final native String getLinksEntry();
    public final native void setLinksEntry(String v);
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof LinkEvent)) {
            return false;
        }
        LinkEvent that = (LinkEvent)o;
        long thisStatus = getStatus();
        long thatStatus = that.getStatus();
        if (thisStatus != thatStatus) {
            return false;
        }
        String thisSource = getSource();
        String thatSource = that.getSource();
        if (thisSource == null) {
            if (thatSource != null) {
                return false;
            }
        } else if (!thisSource.equals(thatSource)) {
            return false;
        }
        String thisLinksEntry = getLinksEntry();
        String thatLinksEntry = that.getLinksEntry();
        if (thisLinksEntry == null) {
            if (thatLinksEntry != null) {
                return false;
            }
        } else if (!thisLinksEntry.equals(thatLinksEntry)) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getStatus(), getSource(), getLinksEntry()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("LinkEvent").append("{");
        b.append("Status:").append(getStatus()).append(",");
        b.append("Source:").append(getSource()).append(",");
        b.append("LinksEntry:").append(getLinksEntry()).append(",");
        return b.append("}").toString();
    }
}

