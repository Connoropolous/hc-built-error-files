// Java class holochain.Service is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * A Service is a Holochain service data structure
 */
public final class Service implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    Service(Seq.Ref ref) { this.ref = ref; }
    
    public Service() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    // skipped field Service.Settings with unsupported type: *types.Named
    
    public final native Agent getDefaultAgent();
    public final native void setDefaultAgent(Agent v);
    
    public final native String getPath();
    public final native void setPath(String v);
    
    /**
     * Clone copies DNA files from a source directory
    bool new indicates if this clone should create a new DNA (when true) or act as a Join
     */
    public native Holochain_ clone(String srcPath, String root, Agent agent, boolean new_, boolean initDB) throws Exception;
    // skipped method Service.ConfiguredChains with unsupported parameter or return types
    
    /**
     * GenChain adds the genesis entries to a newly cloned or joined chain
     */
    public native Holochain_ genChain(String name) throws Exception;
    public native void initAppDir(String root, String encodingFormat) throws Exception;
    /**
     * IsConfigured checks a directory for correctly set up holochain configuration file
     */
    public native String isConfigured(String name) throws Exception;
    /**
     * List chains produces a textual representation of the chains in the .holochain directory
     */
    public native String listChains();
    /**
     * Load instantiates a Holochain instance from disk
     */
    public native Holochain_ load(String name) throws Exception;
    /**
     * MakeAppPackage creates a package blob from a given holochain
     */
    public native byte[] makeAppPackage(Holochain_ h) throws Exception;
    /**
     * MakeTestingApp generates a holochain used for testing purposes
     */
    public native Holochain_ makeTestingApp(String root, String encodingFormat, boolean initDB, boolean newUUID, Agent agent) throws Exception;
    // skipped method Service.SaveFromAppPackage with unsupported parameter or return types
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof Service)) {
            return false;
        }
        Service that = (Service)o;
        // skipped field Service.Settings with unsupported type: *types.Named
        
        Agent thisDefaultAgent = getDefaultAgent();
        Agent thatDefaultAgent = that.getDefaultAgent();
        if (thisDefaultAgent == null) {
            if (thatDefaultAgent != null) {
                return false;
            }
        } else if (!thisDefaultAgent.equals(thatDefaultAgent)) {
            return false;
        }
        String thisPath = getPath();
        String thatPath = that.getPath();
        if (thisPath == null) {
            if (thatPath != null) {
                return false;
            }
        } else if (!thisPath.equals(thatPath)) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getDefaultAgent(), getPath()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("Service").append("{");
        b.append("DefaultAgent:").append(getDefaultAgent()).append(",");
        b.append("Path:").append(getPath()).append(",");
        return b.append("}").toString();
    }
}

