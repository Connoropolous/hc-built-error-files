// Java class holochain.LinkQuery is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * LinkQuery holds a getLinks query
 */
public final class LinkQuery implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    LinkQuery(Seq.Ref ref) { this.ref = ref; }
    
    public LinkQuery() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    // skipped field LinkQuery.Base with unsupported type: *types.Named
    
    public final native String getT();
    public final native void setT(String v);
    
    public final native long getStatusMask();
    public final native void setStatusMask(long v);
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof LinkQuery)) {
            return false;
        }
        LinkQuery that = (LinkQuery)o;
        // skipped field LinkQuery.Base with unsupported type: *types.Named
        
        String thisT = getT();
        String thatT = that.getT();
        if (thisT == null) {
            if (thatT != null) {
                return false;
            }
        } else if (!thisT.equals(thatT)) {
            return false;
        }
        long thisStatusMask = getStatusMask();
        long thatStatusMask = that.getStatusMask();
        if (thisStatusMask != thatStatusMask) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getT(), getStatusMask()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("LinkQuery").append("{");
        b.append("T:").append(getT()).append(",");
        b.append("StatusMask:").append(getStatusMask()).append(",");
        return b.append("}").toString();
    }
}

