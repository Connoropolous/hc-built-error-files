// Java class holochain.Config is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * Config holds the non-DNA configuration for a holo-chain, from config file or environment variables
 */
public final class Config implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    Config(Seq.Ref ref) { this.ref = ref; }
    
    public Config() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    public final native long getPort();
    public final native void setPort(long v);
    
    public final native boolean getEnableMDNS();
    public final native void setEnableMDNS(boolean v);
    
    public final native boolean getPeerModeAuthor();
    public final native void setPeerModeAuthor(boolean v);
    
    public final native boolean getPeerModeDHTNode();
    public final native void setPeerModeDHTNode(boolean v);
    
    public final native boolean getEnableNATUPnP();
    public final native void setEnableNATUPnP(boolean v);
    
    public final native String getBootstrapServer();
    public final native void setBootstrapServer(String v);
    
    // skipped field Config.Loggers with unsupported type: *types.Named
    
    // skipped method Config.SetGossipInterval with unsupported parameter or return types
    
    public native void setup() throws Exception;
    /**
     * SetupLogging initializes loggers as configured by the config file and environment variables
     */
    public native void setupLogging() throws Exception;
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof Config)) {
            return false;
        }
        Config that = (Config)o;
        long thisPort = getPort();
        long thatPort = that.getPort();
        if (thisPort != thatPort) {
            return false;
        }
        boolean thisEnableMDNS = getEnableMDNS();
        boolean thatEnableMDNS = that.getEnableMDNS();
        if (thisEnableMDNS != thatEnableMDNS) {
            return false;
        }
        boolean thisPeerModeAuthor = getPeerModeAuthor();
        boolean thatPeerModeAuthor = that.getPeerModeAuthor();
        if (thisPeerModeAuthor != thatPeerModeAuthor) {
            return false;
        }
        boolean thisPeerModeDHTNode = getPeerModeDHTNode();
        boolean thatPeerModeDHTNode = that.getPeerModeDHTNode();
        if (thisPeerModeDHTNode != thatPeerModeDHTNode) {
            return false;
        }
        boolean thisEnableNATUPnP = getEnableNATUPnP();
        boolean thatEnableNATUPnP = that.getEnableNATUPnP();
        if (thisEnableNATUPnP != thatEnableNATUPnP) {
            return false;
        }
        String thisBootstrapServer = getBootstrapServer();
        String thatBootstrapServer = that.getBootstrapServer();
        if (thisBootstrapServer == null) {
            if (thatBootstrapServer != null) {
                return false;
            }
        } else if (!thisBootstrapServer.equals(thatBootstrapServer)) {
            return false;
        }
        // skipped field Config.Loggers with unsupported type: *types.Named
        
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getPort(), getEnableMDNS(), getPeerModeAuthor(), getPeerModeDHTNode(), getEnableNATUPnP(), getBootstrapServer()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("Config").append("{");
        b.append("Port:").append(getPort()).append(",");
        b.append("EnableMDNS:").append(getEnableMDNS()).append(",");
        b.append("PeerModeAuthor:").append(getPeerModeAuthor()).append(",");
        b.append("PeerModeDHTNode:").append(getPeerModeDHTNode()).append(",");
        b.append("EnableNATUPnP:").append(getEnableNATUPnP()).append(",");
        b.append("BootstrapServer:").append(getBootstrapServer()).append(",");
        return b.append("}").toString();
    }
}

