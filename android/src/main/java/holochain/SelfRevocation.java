// Java class holochain.SelfRevocation is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * SelfRevocation holds the old key being revoked and the new key, other revocation data and
the two cryptographic signatures of that data by the two keys to confirm the revocation
 */
public final class SelfRevocation implements Seq.Proxy, Revocation {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    // skipped constructor SelfRevocation.NewSelfRevocation with unsupported parameter or return types
    
    SelfRevocation(Seq.Ref ref) { this.ref = ref; }
    
    public final native byte[] getData();
    public final native void setData(byte[] v);
    
    public final native byte[] getOldSig();
    public final native void setOldSig(byte[] v);
    
    public final native byte[] getNewSig();
    public final native void setNewSig(byte[] v);
    
    public native byte[] marshal() throws Exception;
    public native void unmarshal(byte[] data) throws Exception;
    /**
     * Verify confirms that a self-revocation is properly signed
     */
    public native void verify() throws Exception;
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof SelfRevocation)) {
            return false;
        }
        SelfRevocation that = (SelfRevocation)o;
        byte[] thisData = getData();
        byte[] thatData = that.getData();
        if (thisData == null) {
            if (thatData != null) {
                return false;
            }
        } else if (!thisData.equals(thatData)) {
            return false;
        }
        byte[] thisOldSig = getOldSig();
        byte[] thatOldSig = that.getOldSig();
        if (thisOldSig == null) {
            if (thatOldSig != null) {
                return false;
            }
        } else if (!thisOldSig.equals(thatOldSig)) {
            return false;
        }
        byte[] thisNewSig = getNewSig();
        byte[] thatNewSig = that.getNewSig();
        if (thisNewSig == null) {
            if (thatNewSig != null) {
                return false;
            }
        } else if (!thisNewSig.equals(thatNewSig)) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getData(), getOldSig(), getNewSig()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("SelfRevocation").append("{");
        b.append("Data:").append(getData()).append(",");
        b.append("OldSig:").append(getOldSig()).append(",");
        b.append("NewSig:").append(getNewSig()).append(",");
        return b.append("}").toString();
    }
}

