// Java class holochain.Meta is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * Meta holds data that can be associated with a hash
@todo, we should also be storing the meta-data source
 */
public final class Meta implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    Meta(Seq.Ref ref) { this.ref = ref; }
    
    public Meta() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    // skipped field Meta.H with unsupported type: *types.Named
    
    public final native String getT();
    public final native void setT(String v);
    
    public final native byte[] getV();
    public final native void setV(byte[] v);
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof Meta)) {
            return false;
        }
        Meta that = (Meta)o;
        // skipped field Meta.H with unsupported type: *types.Named
        
        String thisT = getT();
        String thatT = that.getT();
        if (thisT == null) {
            if (thatT != null) {
                return false;
            }
        } else if (!thisT.equals(thatT)) {
            return false;
        }
        byte[] thisV = getV();
        byte[] thatV = that.getV();
        if (thisV == null) {
            if (thatV != null) {
                return false;
            }
        } else if (!thisV.equals(thatV)) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getT(), getV()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("Meta").append("{");
        b.append("T:").append(getT()).append(",");
        b.append("V:").append(getV()).append(",");
        return b.append("}").toString();
    }
}

