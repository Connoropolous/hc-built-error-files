// Java class holochain.ZomeFile is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

public final class ZomeFile implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    ZomeFile(Seq.Ref ref) { this.ref = ref; }
    
    public ZomeFile() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    public final native String getName();
    public final native void setName(String v);
    
    public final native String getDescription();
    public final native void setDescription(String v);
    
    public final native String getCodeFile();
    public final native void setCodeFile(String v);
    
    public final native String getRibosomeType();
    public final native void setRibosomeType(String v);
    
    // skipped field ZomeFile.BridgeFuncs with unsupported type: *types.Slice
    
    public final native String getBridgeTo();
    public final native void setBridgeTo(String v);
    
    // skipped field ZomeFile.Config with unsupported type: *types.Map
    
    // skipped field ZomeFile.Entries with unsupported type: *types.Slice
    
    // skipped field ZomeFile.Functions with unsupported type: *types.Slice
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof ZomeFile)) {
            return false;
        }
        ZomeFile that = (ZomeFile)o;
        String thisName = getName();
        String thatName = that.getName();
        if (thisName == null) {
            if (thatName != null) {
                return false;
            }
        } else if (!thisName.equals(thatName)) {
            return false;
        }
        String thisDescription = getDescription();
        String thatDescription = that.getDescription();
        if (thisDescription == null) {
            if (thatDescription != null) {
                return false;
            }
        } else if (!thisDescription.equals(thatDescription)) {
            return false;
        }
        String thisCodeFile = getCodeFile();
        String thatCodeFile = that.getCodeFile();
        if (thisCodeFile == null) {
            if (thatCodeFile != null) {
                return false;
            }
        } else if (!thisCodeFile.equals(thatCodeFile)) {
            return false;
        }
        String thisRibosomeType = getRibosomeType();
        String thatRibosomeType = that.getRibosomeType();
        if (thisRibosomeType == null) {
            if (thatRibosomeType != null) {
                return false;
            }
        } else if (!thisRibosomeType.equals(thatRibosomeType)) {
            return false;
        }
        // skipped field ZomeFile.BridgeFuncs with unsupported type: *types.Slice
        
        String thisBridgeTo = getBridgeTo();
        String thatBridgeTo = that.getBridgeTo();
        if (thisBridgeTo == null) {
            if (thatBridgeTo != null) {
                return false;
            }
        } else if (!thisBridgeTo.equals(thatBridgeTo)) {
            return false;
        }
        // skipped field ZomeFile.Config with unsupported type: *types.Map
        
        // skipped field ZomeFile.Entries with unsupported type: *types.Slice
        
        // skipped field ZomeFile.Functions with unsupported type: *types.Slice
        
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getName(), getDescription(), getCodeFile(), getRibosomeType(), getBridgeTo()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("ZomeFile").append("{");
        b.append("Name:").append(getName()).append(",");
        b.append("Description:").append(getDescription()).append(",");
        b.append("CodeFile:").append(getCodeFile()).append(",");
        b.append("RibosomeType:").append(getRibosomeType()).append(",");
        b.append("BridgeTo:").append(getBridgeTo()).append(",");
        return b.append("}").toString();
    }
}

