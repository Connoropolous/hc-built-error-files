// Java class holochain.Zome is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * Zome struct encapsulates logically related code, from a &#34;chromosome&#34;
 */
public final class Zome implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    Zome(Seq.Ref ref) { this.ref = ref; }
    
    public Zome() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    public final native String getName();
    public final native void setName(String v);
    
    public final native String getDescription();
    public final native void setDescription(String v);
    
    public final native String getCode();
    public final native void setCode(String v);
    
    // skipped field Zome.Entries with unsupported type: *types.Slice
    
    public final native String getRibosomeType();
    public final native void setRibosomeType(String v);
    
    // skipped field Zome.Functions with unsupported type: *types.Slice
    
    // skipped field Zome.BridgeFuncs with unsupported type: *types.Slice
    
    // skipped field Zome.BridgeTo with unsupported type: *types.Named
    
    // skipped field Zome.Config with unsupported type: *types.Map
    
    public native String codeFileName();
    /**
     * GetEntryDef returns the entry def structure
     */
    public native EntryDef getEntryDef(String entryName) throws Exception;
    /**
     * GetFunctionDef returns the exposed function spec for the given zome and function
     */
    public native FunctionDef getFunctionDef(String fnName) throws Exception;
    // skipped method Zome.GetPrivateEntryDefs with unsupported parameter or return types
    
    public native Ribosome makeRibosome(Holochain_ h) throws Exception;
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof Zome)) {
            return false;
        }
        Zome that = (Zome)o;
        String thisName = getName();
        String thatName = that.getName();
        if (thisName == null) {
            if (thatName != null) {
                return false;
            }
        } else if (!thisName.equals(thatName)) {
            return false;
        }
        String thisDescription = getDescription();
        String thatDescription = that.getDescription();
        if (thisDescription == null) {
            if (thatDescription != null) {
                return false;
            }
        } else if (!thisDescription.equals(thatDescription)) {
            return false;
        }
        String thisCode = getCode();
        String thatCode = that.getCode();
        if (thisCode == null) {
            if (thatCode != null) {
                return false;
            }
        } else if (!thisCode.equals(thatCode)) {
            return false;
        }
        // skipped field Zome.Entries with unsupported type: *types.Slice
        
        String thisRibosomeType = getRibosomeType();
        String thatRibosomeType = that.getRibosomeType();
        if (thisRibosomeType == null) {
            if (thatRibosomeType != null) {
                return false;
            }
        } else if (!thisRibosomeType.equals(thatRibosomeType)) {
            return false;
        }
        // skipped field Zome.Functions with unsupported type: *types.Slice
        
        // skipped field Zome.BridgeFuncs with unsupported type: *types.Slice
        
        // skipped field Zome.BridgeTo with unsupported type: *types.Named
        
        // skipped field Zome.Config with unsupported type: *types.Map
        
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getName(), getDescription(), getCode(), getRibosomeType()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("Zome").append("{");
        b.append("Name:").append(getName()).append(",");
        b.append("Description:").append(getDescription()).append(",");
        b.append("Code:").append(getCode()).append(",");
        b.append("RibosomeType:").append(getRibosomeType()).append(",");
        return b.append("}").toString();
    }
}

