// Java class holochain.TestData is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * TestData holds a test entry for a chain
 */
public final class TestData implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    TestData(Seq.Ref ref) { this.ref = ref; }
    
    public TestData() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    public final native String getConvey();
    public final native void setConvey(String v);
    
    public final native String getZome();
    public final native void setZome(String v);
    
    public final native String getFnName();
    public final native void setFnName(String v);
    
    // skipped field TestData.Input with unsupported type: *types.Interface
    
    // skipped field TestData.Output with unsupported type: *types.Interface
    
    // skipped field TestData.Err with unsupported type: *types.Interface
    
    public final native String getRegexp();
    public final native void setRegexp(String v);
    
    // skipped field TestData.Time with unsupported type: *types.Named
    
    // skipped field TestData.Wait with unsupported type: *types.Named
    
    public final native String getExposure();
    public final native void setExposure(String v);
    
    public final native boolean getRaw();
    public final native void setRaw(boolean v);
    
    public final native long getRepeat();
    public final native void setRepeat(long v);
    
    public final native boolean getBenchmark();
    public final native void setBenchmark(boolean v);
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof TestData)) {
            return false;
        }
        TestData that = (TestData)o;
        String thisConvey = getConvey();
        String thatConvey = that.getConvey();
        if (thisConvey == null) {
            if (thatConvey != null) {
                return false;
            }
        } else if (!thisConvey.equals(thatConvey)) {
            return false;
        }
        String thisZome = getZome();
        String thatZome = that.getZome();
        if (thisZome == null) {
            if (thatZome != null) {
                return false;
            }
        } else if (!thisZome.equals(thatZome)) {
            return false;
        }
        String thisFnName = getFnName();
        String thatFnName = that.getFnName();
        if (thisFnName == null) {
            if (thatFnName != null) {
                return false;
            }
        } else if (!thisFnName.equals(thatFnName)) {
            return false;
        }
        // skipped field TestData.Input with unsupported type: *types.Interface
        
        // skipped field TestData.Output with unsupported type: *types.Interface
        
        // skipped field TestData.Err with unsupported type: *types.Interface
        
        String thisRegexp = getRegexp();
        String thatRegexp = that.getRegexp();
        if (thisRegexp == null) {
            if (thatRegexp != null) {
                return false;
            }
        } else if (!thisRegexp.equals(thatRegexp)) {
            return false;
        }
        // skipped field TestData.Time with unsupported type: *types.Named
        
        // skipped field TestData.Wait with unsupported type: *types.Named
        
        String thisExposure = getExposure();
        String thatExposure = that.getExposure();
        if (thisExposure == null) {
            if (thatExposure != null) {
                return false;
            }
        } else if (!thisExposure.equals(thatExposure)) {
            return false;
        }
        boolean thisRaw = getRaw();
        boolean thatRaw = that.getRaw();
        if (thisRaw != thatRaw) {
            return false;
        }
        long thisRepeat = getRepeat();
        long thatRepeat = that.getRepeat();
        if (thisRepeat != thatRepeat) {
            return false;
        }
        boolean thisBenchmark = getBenchmark();
        boolean thatBenchmark = that.getBenchmark();
        if (thisBenchmark != thatBenchmark) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getConvey(), getZome(), getFnName(), getRegexp(), getExposure(), getRaw(), getRepeat(), getBenchmark()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("TestData").append("{");
        b.append("Convey:").append(getConvey()).append(",");
        b.append("Zome:").append(getZome()).append(",");
        b.append("FnName:").append(getFnName()).append(",");
        b.append("Regexp:").append(getRegexp()).append(",");
        b.append("Exposure:").append(getExposure()).append(",");
        b.append("Raw:").append(getRaw()).append(",");
        b.append("Repeat:").append(getRepeat()).append(",");
        b.append("Benchmark:").append(getBenchmark()).append(",");
        return b.append("}").toString();
    }
}

