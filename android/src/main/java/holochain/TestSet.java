// Java class holochain.TestSet is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * TestSet holds a set of tests plus configuration and fixture data for those tests
 */
public final class TestSet implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    TestSet(Seq.Ref ref) { this.ref = ref; }
    
    public TestSet() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    // skipped field TestSet.Tests with unsupported type: *types.Slice
    
    public final native String getIdentity();
    public final native void setIdentity(String v);
    
    // skipped field TestSet.Fixtures with unsupported type: *types.Named
    
    public final native boolean getBenchmark();
    public final native void setBenchmark(boolean v);
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof TestSet)) {
            return false;
        }
        TestSet that = (TestSet)o;
        // skipped field TestSet.Tests with unsupported type: *types.Slice
        
        String thisIdentity = getIdentity();
        String thatIdentity = that.getIdentity();
        if (thisIdentity == null) {
            if (thatIdentity != null) {
                return false;
            }
        } else if (!thisIdentity.equals(thatIdentity)) {
            return false;
        }
        // skipped field TestSet.Fixtures with unsupported type: *types.Named
        
        boolean thisBenchmark = getBenchmark();
        boolean thatBenchmark = that.getBenchmark();
        if (thisBenchmark != thatBenchmark) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getIdentity(), getBenchmark()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("TestSet").append("{");
        b.append("Identity:").append(getIdentity()).append(",");
        b.append("Benchmark:").append(getBenchmark()).append(",");
        return b.append("}").toString();
    }
}

