// Java class holochain.DHTConfig is a proxy for talking to a Go program.
//   gobind -lang=java github.com/Holochain/holochain-proto
//
// File is generated by gobind. Do not edit.
package holochain;

import go.Seq;

/**
 * Holds the dht configuration options
 */
public final class DHTConfig implements Seq.Proxy {
    static { Holochain.touch(); }
    
    private final Seq.Ref ref;
    
    @Override public final int incRefnum() {
          int refnum = ref.refnum;
          Seq.incGoRef(refnum);
          return refnum;
    }
    
    DHTConfig(Seq.Ref ref) { this.ref = ref; }
    
    public DHTConfig() { this.ref = __New(); }
    
    private static native Seq.Ref __New();
    
    /**
     * HashType : (string) Identifies hash type to be used for this application. Should be from the list of hash types from the multihash library
     */
    public final native String getHashType();
    /**
     * HashType : (string) Identifies hash type to be used for this application. Should be from the list of hash types from the multihash library
     */
    public final native void setHashType(String v);
    
    /**
     * NeighborhoodSize(integer) Establishes minimum online redundancy targets for data, and size of peer sets for sync gossip. A neighborhood size of ZERO means no sharding (every node syncs all data with every other node). ONE means you are running this as a centralized application and gossip is turned OFF. For most applications we recommend neighborhoods no smaller than 8 for nearness or 32 for hashmask sharding.
     */
    public final native long getNeighborhoodSize();
    /**
     * NeighborhoodSize(integer) Establishes minimum online redundancy targets for data, and size of peer sets for sync gossip. A neighborhood size of ZERO means no sharding (every node syncs all data with every other node). ONE means you are running this as a centralized application and gossip is turned OFF. For most applications we recommend neighborhoods no smaller than 8 for nearness or 32 for hashmask sharding.
     */
    public final native void setNeighborhoodSize(long v);
    
    @Override public boolean equals(Object o) {
        if (o == null || !(o instanceof DHTConfig)) {
            return false;
        }
        DHTConfig that = (DHTConfig)o;
        String thisHashType = getHashType();
        String thatHashType = that.getHashType();
        if (thisHashType == null) {
            if (thatHashType != null) {
                return false;
            }
        } else if (!thisHashType.equals(thatHashType)) {
            return false;
        }
        long thisNeighborhoodSize = getNeighborhoodSize();
        long thatNeighborhoodSize = that.getNeighborhoodSize();
        if (thisNeighborhoodSize != thatNeighborhoodSize) {
            return false;
        }
        return true;
    }
    
    @Override public int hashCode() {
        return java.util.Arrays.hashCode(new Object[] {getHashType(), getNeighborhoodSize()});
    }
    
    @Override public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("DHTConfig").append("{");
        b.append("HashType:").append(getHashType()).append(",");
        b.append("NeighborhoodSize:").append(getNeighborhoodSize()).append(",");
        return b.append("}").toString();
    }
}

